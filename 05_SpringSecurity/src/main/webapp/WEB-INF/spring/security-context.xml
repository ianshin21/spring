<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   		xmlns:c="http://www.springframework.org/schema/c"
  	 	xmlns:p="http://www.springframework.org/schema/p"
   		xmlns:security="http://www.springframework.org/schema/security"
   		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<bean id="customLoginSuccess" class="com.kh.security.security.handler.CustomLoginSuccessHandler"/>

	<bean id="customLoginFailure" class="com.kh.security.security.handler.CustomLoginFailureHandler"/>
	
	<bean id="customUserService" class="com.kh.security.security.service.CustomUserDetailService" />
	
	<!-- 
		/resources 폴더 안에 있는 파일들은 security 대상이 아니라는 것을 나타낸다. 
	 -->
	<security:http pattern="/resources/**" security="none"></security:http>
	
	
	<!-- 
		security:http 
			- HTTP에 대한 요청을 안전하게 보호하는 방벙을 설정, (뿐만 아니라 로그인폼 기반 로그인을 통한 인증을 지원하도록 설정한다. : 아래) 
			- auto-config=true : 로그인, 로그아웃 등에 대한 기본 설정을 해준다. 
			- use-expressions="true" : SpEL (스프링 표현식)의 사용 여부에 대한 설정	
		intercept-url 
			- 해당 페이지의 접속 권한에 대해 설정한다.  
			- pattern="/**" access="isAuthenticated()"/> : 그외는 권한을 부여받아야 된다...는 의미
			- access=??? 는 많이 있음 찾아보든지
	 -->	 
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/login" access="permitAll"/>
		<security:intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
		<security:intercept-url pattern="/member/**" access="hasAnyRole('ADMIN', 'USER')"/>	
		<security:intercept-url pattern="/**" access="isAuthenticated()"/>
		<security:access-denied-handler error-page="/accessError"/>
				 
		 <!-- 로그인폼 기반 로그인을 통한 인증을 지원하도록 설정한다.  -->
		<security:form-login
			login-page="/login"
			username-parameter="userId"
			password-parameter="userPwd"
			authentication-success-handler-ref="customLoginSuccess"
			authentication-failure-url="/login?err=true"
		/>
		<!-- 
			default-target-url="/" 
			      : 로그인 성공 후 이동할 URL (authentication-success-handler-ref="customLoginSuccess" 대신에)
	        authentication-failure-handler-ref="customLoginFailure"			
				  : 로그인 실패 시 이동할 URL (이었는데 버리지 않고 여기서 주석 처리)
			authentication-failure-url="/login?err=true"      
				  : 로그인 실패 시 이동할 URL (이었는데 버리지 않고 여기서 주석 처리)
		 -->
		 
		 
		<security:logout
			logout-url="/logout"
			logout-success-url="/"
		/>
		
		<!-- 
			CSRF 속성을 사용하지 않게 설정한다. 
				- 기본값은 CSRF 공격을 방어할 수 있도록 활성화 되어있다. 
				- 위 로그아웃 시 아래의 설정이 없으면 form 태그에서 CSRF 토큰을 추가해서 로그아웃 요청을 해야한다.  
			<security:csrf disabled="true"/>
		 -->
		 
		 <!-- 
		 	기억하기 기능 활성화 
		 		- key='khweb"  쿠키의 값을 암호화 할 key값
		 		- token-validity-seconds="2429200" : 쿠키 유지 시간(초)
		  -->
		 <security:remember-me key="khweb" token-validity-seconds="2419200"/>
		 
		 <!-- session이 끊어지면 이동창 / 중복 로그인 방지 -->
		 <security:session-management invalid-session-url="/login">
		 	<security:concurrency-control max-sessions="1" expired-url="/login"/>
		 </security:session-management>
		 
	</security:http>
	
	<!-- 
		authentication-manager
			- 사용자에 대한 인증과 관련된 설정을 하는 영역
			- inMemory, DB, LDAP 등 다양한 방법으로 유저 조회 및 인증을 구현하여 설정해 줄 수 있다. 
	 
	 In Memory 방식 설정 (테스트 용도로 사용) : 여기 저장된 password로 로그인
	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			<security:user-service>
				<security:user name="user" password="$2a$10$i9EcXxKlIFSRAvXts2pIa.WQ2IkL0thSPopfvAGd5fiQRvC394y/K" authorities="ROLE_USER"/>
				<security:user name="admin" password="$2a$10$i9EcXxKlIFSRAvXts2pIa.WQ2IkL0thSPopfvAGd5fiQRvC394y/K" authorities="ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	-->
	<!-- 
		스프링에서 제공하는 기본적인 형태의 DB 테이블 스키마를 가진 테이블과 연결하는 방법 : DB에 USER 테이블 만들었음.
	 
	 <security:jdbc-user-service data-source-ref="dataSource" id="jdbcUserService"/>
	 <security:authentication-manager>
		<security:authentication-provider user-service-ref="jdbcUserService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
	 	</security:authentication-provider>
	</security:authentication-manager>
	-->
	
  	<!-- 
	 	우리가 만든 WEB MEMBER 테이블이랑 연결하기 : 여기서 controller 처럼 com.kh.security.security.service.CustomUserDetailService 호출
	-->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserService">
	  		<security:password-encoder ref="bcryptPasswordEncoder"/>
	  	</security:authentication-provider>
	</security:authentication-manager>
	
</beans>





